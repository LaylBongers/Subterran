<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#+

// Creates a new Vector2-style struct
void Vector2Struct(string name, string type, string[] allowedAdditions)
{#>
	public struct <#= name #>
	{
		private readonly <#= type #> _x;
		private readonly <#= type #> _y;

		public <#= name #>(<#= type #> x, <#= type #> y)
		{
			_x = x;
			_y = y;
		}

		public <#= type #> X { get { return _x; } }
		public <#= type #> Y { get { return _y; } }

<#+	
	foreach (var addition in allowedAdditions)
	{
#>
		public static <#= name #> operator +(<#= name #> left, <#= addition #> right)
		{
			return new <#= name #>(left.X + right.X, left.Y + right.Y);
		}
<#+
	}
#>
	}
<#+
}

// Creates a new Vector3-style struct
void Vector3Struct(string name, string type, string[] allowedAdditions)
{#>
	public struct <#= name #>
	{
		private readonly <#= type #> _x;
		private readonly <#= type #> _y;
		private readonly <#= type #> _z;

		public <#= name #>(<#= type #> x, <#= type #> y, <#= type #> z)
		{
			_x = x;
			_y = y;
			_z = z;
		}

		public <#= type #> X { get { return _x; } }
		public <#= type #> Y { get { return _y; } }
		public <#= type #> Z { get { return _z; } }

		// Scales the <#= name #> to the given amount.
		public static <#= name #> operator *(<#= name #> left, <#= type #> right)
		{
			return new <#= name #>(left.X * right, left.Y * right, left.Z * right);
		} 

<#+	
	foreach (var addition in allowedAdditions)
	{
#>
		public static <#= name #> operator +(<#= name #> left, <#= addition #> right)
		{
			return new <#= name #>(left.X + right.X, left.Y + right.Y, left.Z + right.Z);
		}
<#+
	}
#>
	}
<#+
}
#>